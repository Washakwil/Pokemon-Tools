package rng.gen7.egg;

import pokemon.Nature;
import rng.RNGState;
import rng.Search;
import rng.TinyMT;

public class Gen7EggSeedFinder {

	public class NatureSearch implements Search {

		public static final int THREAD_COUNT = 8;
		private GuiGen7EggSeedFinder output;
		private Nature[] natures;
		private boolean cancel = false;
		private int advance;
		private int minSeed, maxSeed;
		
		public NatureSearch(GuiGen7EggSeedFinder output, Nature[] natures, boolean shinyCharm, int minSeed, int maxSeed) {
			this.minSeed = minSeed;
			this.maxSeed = maxSeed;
			this.output = output;
			this.natures = natures;
			advance = 10;
			if(shinyCharm) advance += 2;
		}
		
		@Override
		public void run() {
			for(int seed = minSeed; Integer.compareUnsigned(seed, maxSeed) <= 0; seed++) {
				if(checkSeed(seed)) {
					RNGState status = new TinyMT(seed).getState();
					output.addToTable(seed, status);
				}
				output.seedChecked();
				if(cancel || seed == 0xFFFFFFFF) {
					break;
				}
			}
			output.cancelSearch(this);
		}

		private boolean checkSeed(int seed) {
			TinyMT rng = new TinyMT(seed);
			for(int i = 0; i < 8; i++) {
				if(natures[i] != generateNature(rng)) return false;
				generateRest(rng);
			}
			return true;
		}

		private Nature generateNature(TinyMT rng) {
			rng.nextState();
			return Nature.getNature(rng.nextInt());
		}

		private void generateRest(TinyMT rng) {
			
			rng.nextState();
			
			int[] inheritIVs = new int[3];
			inheritIVs[0] = Integer.remainderUnsigned(rng.nextInt(), 6);
			rng.nextState();
			do {
				inheritIVs[1] = Integer.remainderUnsigned(rng.nextInt(), 6);
			} while(inheritIVs[1] == inheritIVs[0]);
			rng.nextState();
			do {
				inheritIVs[2] = Integer.remainderUnsigned(rng.nextInt(), 6);
			} while(inheritIVs[2] == inheritIVs[0] || inheritIVs[2] == inheritIVs[1]);
			
			rng.next(advance);
		}

		public void cancel() {
			cancel = true;
		}
		
		public boolean isCanceled() {
			return cancel;
		}

		@Override
		public void start() {
			new Thread(this).start();
		}
		
	}
	
	public void magikarp127(GuiGen7EggSeedFinder output, String input) {
		int[] list = new int[4];
		for(int k = 0; k < 4; k++)
		{
			int t = 1;
			for(int i = 0; i < 32; i++)
			{
				if(i + k * 32 == 127) break;
				if(input.charAt(i + k * 32) == 'f') {
					list[k] ^= t;
				}
				t <<= 1;
			}
		}
		int[] tarr = new int[4];
		int[] result = new int[4];
		int t = 1, c = 0;
		for(int i = 0; i < 127; i++)
		{
			if(i == 31 || i == 63 || i == 95)
			{
				t = 1;
				c++;
			}
			for(int k = 0; k < 4; k++)
			{
				tarr[k] = INV_LIST[i * 4 + k] & list[k];
				while(Integer.compareUnsigned(tarr[k], 0) > 0)
				{
					if((tarr[k] & 1) == 1) {
						result[c] ^= t;
					}
					tarr[k] >>>= 1;
				}
			}
			t <<= 1;
		}
		output.addToTable(0, new RNGState(result));
	}

	private static final int[] INV_LIST = new int[] {
			0x9374b832, 0xaf630c9b, 0xe39c4434, 0x5fc1aab2,
			0x69a675f1, 0xbd3bda18, 0x28c0425a, 0x1085296e,
			0x1c3be6fc, 0x2c23ba33, 0xdebc413d, 0x31c7020b,
			0xbbd26ec9, 0x69e216e9, 0xadd37392, 0x224aeb96,
			0xe79cd92e, 0x7e22d643, 0xf6e13d06, 0x2a335ad5,
			0x3117d9ab, 0xdeb7e9e6, 0xba057ad8, 0x2ec75958,
			0xc8a18cb0, 0xe769c722, 0xcfe73970, 0x2cd358b8,
			0x25385e43, 0x53582c1f, 0x3d604bb2, 0x2deb9494,
			0x3cb5f0fe, 0x347150fc, 0x2a7a2373, 0x2d6c077e,
			0x9b993151, 0x2ff951d, 0xb9bab82a, 0x2d2343fd,
			0xae422688, 0x2f551181, 0x6f7dcb49, 0x5d237e3d,
			0xcc01041, 0xdecc07e8, 0x335feb7f, 0x30c48335,
			0x684a5d01, 0xa925a653, 0xc2563b50, 0x4b79f55c,
			0x77f1bd4d, 0x16f3746c, 0x9cd2e78c, 0x668cda84,
			0x8f0545c8, 0x1e6349b0, 0xc6db891d, 0x40160ff7,
			0x689dd586, 0xfa7967f7, 0x17eca59f, 0x32f35167,
			0x705f98c, 0x4a3130d7, 0xe68b56c3, 0x7da1b0d3,
			0x6ccf66a6, 0xa827f326, 0x2fad804b, 0x2682228,
			0x574b761, 0xec6d5d89, 0xf3f1f14e, 0x71441643,
			0x8849dd0, 0x90c16915, 0xf0f8d52d, 0x4c66da6d,
			0x3afbb98c, 0x34264314, 0xe2d5ab6, 0x68d2e033,
			0x50077189, 0x18913ae9, 0x6ff21dbd, 0x3869a1ad,
			0xd0e3d31c, 0x4314746f, 0x6ee00690, 0x3d18db38,
			0x9506dfbf, 0x8b313d3b, 0x50a4dee1, 0xab10c8b,
			0x40ea9ca6, 0xd26adc58, 0xbfa7af5f, 0x15223ba0,
			0x831bd9, 0x5b1d11b3, 0xcf39e9a9, 0x4565cef9,
			0x4942afe4, 0x5675b633, 0xa242a736, 0x4237ce9a,
			0xe47cc7f7, 0xb6373c3, 0xcb0a7af5, 0x2e35b759,
			0x400b43a1, 0x8128290b, 0x31290b88, 0x304dbf0b,
			0x8f5beddc, 0xf4e3ed4c, 0x4b37fab, 0x357ce0f1,
			0x9ba36ca6, 0x49dc908d, 0x5d351e07, 0x36b36631,
			0xbe13ca27, 0xd30a49f0, 0x2ab57723, 0x67d11547,
			0xd34cebe2, 0x7a77b430, 0x518084b5, 0x210a52dc,
			0x3877cdf8, 0x58477466, 0xbd78827a, 0x638e0417,
			0x77a4dd92, 0xd3c42dd3, 0x5ba6e724, 0x4495d72d,
			0xcf39b25c, 0xfc45ac87, 0xedc27a0c, 0x5466b5ab,
			0x622fb356, 0xbd6fd3cc, 0x740af5b1, 0x5d8eb2b1,
			0x91431960, 0xced38e45, 0x9fce72e1, 0x59a6b171,
			0x4a70bc86, 0xa6b0583e, 0x7ac09764, 0x5bd72928,
			0x796be1fc, 0x68e2a1f8, 0x54f446e6, 0x5ad80efc,
			0x373262a2, 0x5ff2a3b, 0x73757054, 0x5a4687fb,
			0xc47ef753, 0xd36673c4, 0x337669d8, 0x6214bc58,
			0x19802082, 0xbd980fd0, 0x66bfd6ff, 0x6189066a,
			0x486e0041, 0xdf871c61, 0x692189eb, 0x4ea1aa9b,
			0x7719c0d9, 0xa02ab81f, 0xd4283052, 0x154bf52b,
			0x86f031d3, 0xb10ac3a6, 0x603aed70, 0x587e5fcd,
			0xd13bab0c, 0xf4f2cfee, 0x2fd94b3f, 0x65e6a2ce,
			0x96f1495b, 0x19ae3169, 0x209b52cc, 0x23112185,
			0xd99ecd4c, 0x504fe64c, 0x5f5b0097, 0x4d04450,
			0x9213d481, 0x5516ebd5, 0xa6e1dd7, 0x3ada6ca5,
			0x89f381e3, 0xac4e82ed, 0xc7c5511, 0x409ff4f9,
			0xed0dc95b, 0xe580d6ef, 0xf1d74a26, 0x9f78044,
			0xa00ee312, 0x312275d2, 0xdfe43b7a, 0x70d3435a,
			0xa1c7a638, 0x8628e8df, 0xddc00d20, 0x7a31b670,
			0x2a0dbf7e, 0x16627a77, 0xa149bdc3, 0x15621916,
			0x81d5394c, 0xa4d5b8b0, 0x7f4f5ebf, 0x2a447741,
			0x99fc8df1, 0x3bf673a1, 0x73fe2c18, 0x5299ddd1,
			0xa7fe58b, 0x21273ca1, 0xa908b126, 0x5c3ddd17,
			0xc8f98fee, 0x16c6e787, 0x9614f5ea, 0x5c6b6eb3,
			0x80168742, 0x2505216, 0x62521711, 0x609b7e16,
			0x1eb7dbb8, 0xe9c7da99, 0x966ff57, 0x6af9c1e2,
			0x3746d94c, 0x93b9211b, 0xba6a3c0e, 0x6d66cc62,
			0x7515bd8e, 0x503adbf4, 0xa5568164, 0x29c784a6,
			0xe4dd2e0d, 0x2bd8c326, 0xb8e7110d, 0x17f06aac,
			0xa699d7c6, 0xf4ef6861, 0xa301096a, 0x4214a5b8,
			0xe81521b1, 0x3d42b80b, 0x977cfbbe, 0x1f4e480d,
			0x77b30165, 0x2a440b61, 0x5ac03103, 0x5179ee78,
			0x689defb, 0x754709c8, 0x36090b53, 0x709f2b75,
			0x5ca5dced, 0xf713f75f, 0x5981429, 0x634f2540,
			0xba7c8881, 0x106b4c4c, 0xd2111a89, 0x6b1f22c1,
			0xc1bc34d, 0xc0ace0bb, 0x180cd183, 0x6ffc1272,
			0x6a2d79b9, 0x5c091337, 0x44657286, 0x6de25dda,
			0xf69e7f07, 0x863204b1, 0xb671fe2, 0x6cdf4fd4,
			0x100754e5, 0x2b00b74e, 0x8b612cfb, 0x1c7b3892,
			0xabfafb47, 0xf6fc4f67, 0x20f252b5, 0x1b404cf6,
			0x826bac3, 0x32c26805, 0x3fceec9d, 0x45111514,
			0xee3381b2, 0x4055703e, 0xa85060a5, 0x2a97ea57,
			0x951ad9e5, 0xefd9d78a, 0x2df825ab, 0x68aeffb8,
			0x3a8dec5b, 0x6429cf1a, 0xb23f6935, 0x139f05be,
			0x2de292b6, 0x335c62d3, 0x4136a598, 0x4622430a,
			0xb33d9a98, 0xa09fcc99, 0xbeb6012e, 0x9a088a0,
			0x2427a902, 0xaa2dd7ab, 0x14dc3bae, 0x75b4d94a,
			0x8b1db985, 0xd551551c, 0xf5755569, 0x596da9d0,
			0xda1b92b4, 0xcb01addf, 0xe3ae944d, 0x13ef0089,
			0xd8e77c65, 0xef88bb62, 0x524589be, 0x39f4c697,
			0xdb75f631, 0x819d8178, 0x560de50b, 0x2c312cc3,
			0x541b7efc, 0x2cc4f4ee, 0x42937b86, 0x2ac4322d,
			0x3aa729a, 0x49ab7161, 0xfe9ebd7f, 0x5488ee82,
			0xab03a1a3, 0xfa20b784, 0xa71a77a, 0x7d61fb80,
			0x8c057157, 0xcf822985, 0xbf9c9d06, 0x6029fa0d,
			0x909a59d, 0xa0419fc8, 0xc1a4149e, 0x60849d45,
			0x98d7b4c7, 0x896cf4ea, 0x2929d168, 0x1964bc0e,
			0xa5950d33, 0x5e43e5f5, 0xff4001e5, 0xda1c3e6,
			0xf67708db, 0xaabe12f1, 0x99598757, 0x29fd8e7,
			0xea2b7b1e, 0xa075b7e8, 0x4aad02c8, 0x538f094d,
			0x1, 0x0, 0x0, 0x0,
			0xc9ba5c1b, 0x57b1864d, 0x71ce221a, 0x2fe0d559,
			0x8f07f1e0, 0x9cc00ad2, 0x39dd8bb1, 0x2c5a74b8,
			0x41225140, 0xdfc56f60, 0x649f6bae, 0x4a720dd3,
			0x2c00f108, 0x34c7a762, 0x1821def5, 0x7c65ca85,
			0x7912aeec, 0xb7c6fa36, 0x447075b9, 0x65900965,
			0x327c4aee, 0x366ce0e4, 0xc7a0b699, 0x682e512f,
			0x227dce30, 0x7a63b9b5, 0xecc3eeb9, 0x6e4cb6f3,
			0x7eb1d4ca, 0xffd0ba9, 0x55d90cc, 0x6d2dfff0,
			0x57888e2e, 0xa8153a95, 0x872c5458, 0x6cb2bba4,
			0x15a56c7e, 0xf45b46dc, 0x9fbac32c, 0x6c695345,
			0x861ba70b, 0xc720f53f, 0x5b80e3c9, 0x541fc4c9,
			0xd6571de4, 0x8636ddd3, 0xa3743a4f, 0x4d333e27,
			0x74bbb068, 0xd65fa3db, 0xe9ba8089, 0x5c38130,
			0x5b15cb1d, 0xc80c8a17, 0x4edc68c7, 0x17dd0c7a,
			0x9f0a0cff, 0xee297fe8, 0xb8d74ff5, 0x11f17ef4,
			0xbeda2a2e, 0x1869baa6, 0xc86a164d, 0x65fda88,
			0xfc53cec2, 0x22dbcb85, 0x55921cd5, 0x56f84bd2,
			0x2674fa16, 0xd294b6d7, 0x5a5dfa50, 0x34d0a0d0,
			0xdfb1f5aa, 0x3c1c637d, 0xcde55834, 0x6c43ac04,
			0x4102cbe9, 0x33602a52, 0x5f101574, 0x72890c7,
			0xc4801bee, 0xa6d9f836, 0xf4956e14, 0x2e2756f3,
			0x688320af, 0x37f6c426, 0xe3b89999, 0x71edbf8a,
			0xa3c0b659, 0x574df53c, 0xce3a1423, 0x5032e556,
			0x3dfafd80, 0x812ce1e8, 0xe9903530, 0x760a09e2,
			0xf770758e, 0x803ad4d4, 0x5a35f420, 0x1cb5dfd6,
			0xe9797e69, 0x2590bd62, 0x669e3235, 0x24ad2ab1,
			0xc6cf8e08, 0x4caab126, 0xa9c2bf82, 0x79497efb,
			0x391efee7, 0x5d072b37, 0x3fa62f5b, 0x3f706e01,
			0x36659e89, 0x50f9f922, 0xa602279d, 0x1af88bbf,
			0x361de8e8, 0xb87956b1, 0x62c1244f, 0x349f0326,
			0x34cdbf5e, 0xfb378a94, 0x2bd04897, 0x56cf952b
};
	
}
